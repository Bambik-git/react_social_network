{"version":3,"file":"static/js/936.a855f635.chunk.js","mappings":"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","sources":["Components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.js","Components/Profile/ProfileInfo/ProfileEdit/ProfileEdit.js","Components/Profile/ProfileInfo/ProfileData/ProfileData.js","Components/Profile/ProfileInfo/ProfileInfo.js","Components/Profile/MyPosts/Post/Post.js","Components/Profile/MyPosts/CreatePost/CreatePost.js","Components/Profile/MyPosts/MyPostsContainer.js","Components/Profile/profile.js","Components/Profile/ProfileContainer.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport './ProfileStatus.css'\r\n\r\n\r\nconst ProfileStatus = ({isOwner, updateStatus, ...props}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(status);\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !editMode ?\r\n                    <div className='status'>\r\n                        <span onDoubleClick={() => {\r\n                            setEditMode(true)\r\n                        }}>{status || \"Нет статуса\"}</span>\r\n                        {isOwner &&\r\n                            <div>\r\n                                <span\r\n                                    className=\"status_annotation basic-text--color-muted\">Для того чтобы изменить статус дважды щелкните на текст</span>\r\n                            </div>}\r\n                    </div>\r\n                    : isOwner ?\r\n                        <div className='update_status_input'>\r\n                            <input className='default_input status_input'\r\n                                   onChange={event => setStatus(event.currentTarget.value)}\r\n                                   autoFocus={true}\r\n                                   onBlur={deactivateEditMode}\r\n                                   value={status}\r\n                                   maxLength='200'/>\r\n                            <div>\r\n                                <span\r\n                                    className=\"status_annotation basic-text--color-muted\">Ваш статус должен содержать не более 200 символов</span>\r\n                            </div>\r\n                        </div> : <span>{status || \"Нет статуса\"}</span>\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\n","import React from \"react\";\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport './ProfileEdit.css'\r\n\r\nexport const ProfileEdit = ({profile, setEditMode, editProfile}) => {\r\n    return <>\r\n        <div className=\"page_profile_user_data\">\r\n            <Formik\r\n                initialValues={\r\n                    {\r\n                        AboutMe: 'I\\'am cool',\r\n                        fullName: profile.fullName,\r\n                        lookingForAJob: profile.lookingForAJob,\r\n                        lookingForAJobDescription: profile.lookingForAJobDescription,\r\n                        contacts: {\r\n                            'facebook': profile.contacts.facebook,\r\n                            'website': profile.contacts.website,\r\n                            'vk': profile.contacts.vk,\r\n                            'twitter': profile.contacts.twitter,\r\n                            'instagram': profile.contacts.instagram,\r\n                            'youtube': profile.contacts.youtube,\r\n                            'github': profile.contacts.github,\r\n                            'mainLink': profile.contacts.mainLink,\r\n                        }\r\n\r\n                    }}\r\n\r\n                onSubmit={(values, {setStatus}) => {\r\n                    editProfile(values, setStatus).then(() => setEditMode(false)).catch(err => console.log(err))\r\n                }}\r\n            >\r\n                {({status}) => (\r\n                    <Form>\r\n                        {status && status.errors &&\r\n                            <div className=\"error_message_block\">{status.errors}</div>\r\n                        }\r\n\r\n                        {/*<div>*/}\r\n                        {/*    <label htmlFor={'AboutMe'}>About Me: </label>*/}\r\n                        {/*    <Field type={'text'} name={'AboutMe'} placeholder={'About Me'}/>*/}\r\n                        {/*</div>*/}\r\n                        {/*<ErrorMessage name=\"AboutMe\" component=\"div\"/>*/}\r\n\r\n                        <div className=\"edit_profile_item\">\r\n                            <label className=\"edit_profile_label\" htmlFor={'fullName'}>Ваше имя: </label>\r\n                            <Field className=\"default_input edit_profile_input\" type={'text'} maxLength='40' name={'fullName'} placeholder={'Ваше имя'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"fullName\" component=\"div\"/>\r\n\r\n                        <div className=\"edit_profile_item\">\r\n                            <label className=\"edit_profile_label\">Вы ищите работу?</label>\r\n                            <div className=\"edit_profile_radio\">\r\n                                <label>\r\n                                    <Field type='radio' name=\"lookingForAJob\" id=\"yes\" value='true'/>\r\n                                    Да\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"edit_profile_radio\">\r\n                                <label>\r\n                                    <Field type='radio' name=\"lookingForAJob\" id=\"no\" value='false'/>\r\n                                    Нет\r\n                                </label>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <ErrorMessage name=\"lookingForAJob\" component=\"div\"/>\r\n\r\n                        <div className=\"edit_profile_item\">\r\n                            <label className=\"edit_profile_label\" htmlFor={'lookingForAJobDescription'}>Напишите о ваших проффесиональных навыках: </label>\r\n                            <Field as={'textarea'} className=\"edit_profile_textarea\" name={'lookingForAJobDescription'} wrap=\"hard\"\r\n                                   placeholder={'Напишите о своих навыках'}/>\r\n                        </div>\r\n                        <ErrorMessage name=\"lookingForAJobDescription\" component=\"div\"/>\r\n\r\n                        <div className=\"page_profile_user_data_contacts\">\r\n                            <h3>Поделитесь своими контактами:</h3>{Object.keys(profile.contacts).map(key =>\r\n                            <div className=\"edit_profile_item\">\r\n                            <label className=\"edit_profile_label\" htmlFor={'contacts.' + key}>{key}: </label>\r\n                            <Field className=\"default_input edit_profile_input\" type={'text'} name={'contacts.' + key}/>\r\n                            <ErrorMessage name={'contacts.' + key}/>\r\n                        </div>)\r\n                        }\r\n                        </div>\r\n\r\n                        <button className='default_btn' type={'submit'}>Изменить</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </>\r\n}","import React from \"react\";\r\nimport './ProfileData.css'\r\n\r\nconst ProfileData = (props) => {\r\n    return <>\r\n        <div className=\"page_profile_user_data\">\r\n            <div><span className=\"basic-text--color-muted\">Имя: </span> {props.profile.fullName}</div>\r\n            <div><span\r\n                className=\"basic-text--color-muted\">В поиске работы? </span> {props.profile.lookingForAJob ? 'Да' : 'Нет'}\r\n            </div>\r\n\r\n            <div className='page_profile_user_data_item'>\r\n                <span className=\"basic-text--color-muted\">Профессиональные навыки: </span>\r\n                <span>{props.profile.lookingForAJobDescription}</span>\r\n            </div>\r\n\r\n            {/*<div>*/}\r\n            {/*    <span className=\"basic-text--color-muted\">Обо мне: </span>*/}\r\n            {/*</div>*/}\r\n            <div className=\"page_profile_user_data_contacts\">\r\n                <h3>Контакты</h3>\r\n                {Object.keys(props.profile.contacts).map(key =>\r\n                    <div key={key}><span className=\"basic-text--color-muted\">\r\n                {key}:</span> {props.profile.contacts[key]}\r\n                    </div>)}\r\n            </div>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default ProfileData;","import './ProfileInfo.css'\r\nimport Preloader from \"../../common/Preloader/preloader\";\r\nimport React, {useState} from \"react\";\r\nimport userNoLogo from '../../../assets/no_logo.svg'\r\nimport ProfileStatus from \"./ProfileStatus/ProfileStatus\";\r\nimport {ProfileEdit} from \"./ProfileEdit/ProfileEdit\";\r\nimport ProfileData from \"./ProfileData/ProfileData\";\r\n\r\n\r\n\r\nconst ProfileInfo = ({profile, isOwner, status, updateStatus, savePhoto, editProfile}) => {\r\n    //Переход в режим редактирования страницы профиля\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    //Если профиль не загрузился\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    //Загрузка фотографии с помощью <input type='file'>\r\n    const onSavePhoto = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"section_profile\">\r\n                <div className=\"section_title\">\r\n                    <h2>Профиль</h2>\r\n                    {isOwner && !editMode && <div>\r\n                        <button className=\"default_btn\" onClick={() => setEditMode(true)}>Изменить</button>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n            <div className=\"page_profile__body\">\r\n                <div className=\"page_profile__user_img\">\r\n                    {profile ?\r\n                        <img alt={'Profile_logo'} src={profile.photos.large || userNoLogo}/>\r\n                        : null\r\n                    }\r\n                </div>\r\n                {isOwner && editMode &&\r\n                    <div className=\"upload_photo\">\r\n                        {isOwner &&\r\n                                <input type={'file'} onChange={onSavePhoto}/>\r\n                        }\r\n\r\n                    </div>\r\n                }\r\n\r\n\r\n            <div className=\"page_profile__content\">\r\n                    <div className=\"page_profile__user_status\">\r\n                        <ProfileStatus status={status}\r\n                                       updateStatus={updateStatus}\r\n                                       isOwner={isOwner}/>\r\n\r\n                    </div>\r\n\r\n                    {editMode\r\n                        ? <ProfileEdit profile={profile}\r\n                                       setEditMode={setEditMode}\r\n                                       editProfile={editProfile}/>\r\n                        : <ProfileData profile={profile}\r\n                                       isOwner={isOwner}\r\n                                       editMode={setEditMode}\r\n                        />}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport userNoLogo from \"../../../../assets/no_logo.svg\";\r\nimport './Post.css'\r\n\r\nconst Post = React.memo(({profile, message }) => {\r\n    console.log('CreatePost')\r\n    return (\r\n        <div className=\"block\">\r\n            <div className=\"section_post\">\r\n                <div className=\"section_post__user_img\">\r\n                    {profile ?\r\n                        <img alt={'Profile_logo'} src={profile.photos.small || userNoLogo}/>\r\n                        : null\r\n                    }\r\n                </div>\r\n                <div className=\"section_post_item\">{message}</div>\r\n            </div>\r\n        </div>\r\n)\r\n})\r\n\r\nexport default Post;","import cn from \"classnames\";\r\nimport userNoLogo from \"../../../../assets/no_logo.svg\";\r\nimport React from \"react\";\r\nimport './CreatePost.css'\r\n\r\nlet CreatePost = ({error_post, profile, profileData, update_new_post, on_add_post, clear_post}) => {\r\n    // Создание ссылки и привязка к тегу textarea\r\n    let newPostElement = React.createRef()\r\n\r\n    return (\r\n        <div className={cn({\r\n            'block': true,\r\n            'post_error': error_post !== null,\r\n        })}>\r\n            <div className=\"section_post__user_img\">\r\n                {profile ?\r\n                    <img alt={'Profile_logo'} src={profile.photos.small || userNoLogo}/>\r\n                    : null\r\n                }\r\n            </div>\r\n            <textarea name=\"new_post\"\r\n                      wrap=\"hard\"\r\n                      id=\"new_post\"\r\n                      className=\"send_post\"\r\n                      placeholder=\"Что у вас нового?\"\r\n                      ref={newPostElement}\r\n                      value={profileData.NewPostText}\r\n                      onChange={(e) => update_new_post(e.target.value)}/>\r\n            <div className='post_error_message'><span>{error_post}</span></div>\r\n            <div className=\"post_button_align\">\r\n                <button className=\"default_btn\" onClick={() => clear_post()}>Очистить</button>\r\n                <button className=\"default_btn\" onClick={on_add_post}>Опубликовать</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CreatePost;","import './MyPosts.css'\r\nimport {connect} from \"react-redux\";\r\nimport {add_post, clear_post, update_new_post} from \"../../../redux/profile_reducer\";\r\nimport React, {useState} from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport CreatePost from \"./CreatePost/CreatePost\";\r\n\r\nlet MyPostsContainer =  ({profileData, add_post, clear_post, update_new_post, profile}) => {\r\n    console.log('MyPostsContainer')\r\n\r\n    //Текст ошибки ввода поста\r\n    const [error_post, setError_post] = useState(null)\r\n\r\n    let on_add_post = () => {\r\n        if (profileData.NewPostText === '') {\r\n            setError_post('Поле не может быть пустым')\r\n        } else {\r\n            add_post()\r\n            setError_post(null)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CreatePost error_post={error_post}\r\n                        profile={profile}\r\n                        profileData={profileData}\r\n                        update_new_post={update_new_post}\r\n                        on_add_post={on_add_post}\r\n                        clear_post={clear_post}  />\r\n            {/*Создание массива компонент для отображения каждого поста*/}\r\n            {[...profileData.postsData]\r\n                .reverse()\r\n                .map(posts => <Post key={posts.id}\r\n                                    message={posts.post_text}\r\n                                    likes={posts.likes}\r\n                                    profile={profile} />)}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profileData: state.profilePage\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    clear_post,\r\n    add_post,\r\n    update_new_post,\r\n})(MyPostsContainer);\r\n","import ProfileInfo from \"./ProfileInfo/ProfileInfo.js\";\r\nimport MyPostsContrainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = ({status, profile, isOwner, updateStatus, savePhoto, editProfile}) => {\r\n    console.log('Profile')\r\n    return (\r\n        <>\r\n            <div className='block'>\r\n                <ProfileInfo profile={profile}\r\n                             isOwner={isOwner}\r\n                             status={status}\r\n                             updateStatus={updateStatus}\r\n                             savePhoto={savePhoto}\r\n                             editProfile={editProfile}/>\r\n            </div>\r\n            {isOwner && <MyPostsContrainer profile={profile}/>}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    editProfile,\r\n    getStatusThunk,\r\n    getUsersProfileThunk,\r\n    savePhotoThunk,\r\n    updateStatusThunk\r\n} from \"../../redux/profile_reducer\";\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    useParams,\r\n} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile () {\r\n        /*\r\n        Функция для обновления страницы профиля\r\n        userId - берется из текущего URL\r\n         */\r\n        let userId = this.props.router.params.userId;\r\n        /*Если в URL пути не указан user_id профиля, значит переменная userId пустая. В этом случае загружается страница\r\n        авторизованного пользователя*/\r\n        if (!userId) {\r\n            userId = this.props.auth_user_id;\r\n        }\r\n\r\n        this.props.getUsersProfileThunk(userId)\r\n        this.props.getStatusThunk(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        /*\r\n        Если userId в URL пути изменился, то загружается страница нового пользователя.\r\n         */\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId){\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log('Profile Container')\r\n        return (\r\n        <div>\r\n            <Profile {...this.props}\r\n                     isOwner = {!this.props.router.params.userId}\r\n                     profile ={this.props.profile}\r\n                     updateStatus={this.props.updateStatusThunk}\r\n                     savePhoto={this.props.savePhotoThunk}\r\n                     editProfile={this.props.editProfile}/>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction withRouter(Component) {\r\n    /*\r\n    HOC позволяет извлекать данные из URL запроса в частности userId\r\n     */\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    auth_user_id: state.auth.userId,\r\n    is_auth: state.auth.is_auth,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        getUsersProfileThunk,\r\n        getStatusThunk,\r\n        updateStatusThunk,\r\n        savePhotoThunk,\r\n        editProfile,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);"],"names":["_ref","isOwner","updateStatus","props","editMode","setEditMode","useState","status","setStatus","useEffect","_jsx","_Fragment","children","_jsxs","className","onChange","event","currentTarget","value","autoFocus","onBlur","deactivateEditMode","maxLength","onDoubleClick","ProfileEdit","profile","editProfile","Formik","initialValues","AboutMe","fullName","lookingForAJob","lookingForAJobDescription","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","onSubmit","values","_ref2","then","catch","err","console","log","_ref3","Form","errors","htmlFor","Field","type","name","placeholder","ErrorMessage","component","id","as","wrap","Object","keys","map","key","savePhoto","Preloader","onClick","alt","src","photos","large","userNoLogo","e","target","files","length","ProfileStatus","ProfileData","Post","React","message","small","error_post","profileData","update_new_post","on_add_post","clear_post","newPostElement","cn","ref","NewPostText","connect","state","profilePage","add_post","setError_post","CreatePost","postsData","reverse","posts","post_text","likes","ProfileInfo","MyPostsContrainer","ProfileContainer","refreshProfile","userId","this","router","params","auth_user_id","getUsersProfileThunk","getStatusThunk","componentDidMount","componentDidUpdate","prevProps","prevState","snapshot","render","Profile","updateStatusThunk","savePhotoThunk","compose","auth","is_auth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect"],"sourceRoot":""}